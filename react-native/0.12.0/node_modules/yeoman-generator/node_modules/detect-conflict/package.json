{
  "name": "detect-conflict",
  "version": "1.0.0",
  "description": "Small utility library that check if a new file content can be merged safely in the on-disk existing file.",
  "main": "index.js",
  "files": [
    "index.js"
  ],
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/SBoudrias/detect-conflict.git"
  },
  "author": {
    "name": "Simon Boudrias"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/SBoudrias/detect-conflict/issues"
  },
  "homepage": "https://github.com/SBoudrias/detect-conflict",
  "dependencies": {},
  "devDependencies": {
    "mocha": "^1.21.5"
  },
  "readme": "detect-conflict\n=================\n\nSmall utility library that check if a new file content can be merged safely in the on-disk existing file.\n\n## Usage\n\n### Example\n```js\nvar conflict = require('detect-conflict');\n\nvar isConflicting = conflict('some-file-name.js', 'var newContent;');\n```\n\nIt'll return `true` if a conflict is found, `false` otherwise.\n\n### API\n\n#### `conflict(filepath : string, contents : Buffer | String)`\n\nIf the `contents` is passed as a string, we assume it is utf8 encoded. Pass a `Buffer` if you want to compare special encoding.\n\nIf `filepath` points to a directory, we'll always return `true`.\n",
  "readmeFilename": "README.md",
  "_id": "detect-conflict@1.0.0",
  "_shasum": "eaa13c2554aa015f4b471174ab7925065e9d9a02",
  "_resolved": "https://registry.npmjs.org/detect-conflict/-/detect-conflict-1.0.0.tgz",
  "_from": "detect-conflict@>=1.0.0 <2.0.0"
}
