{
  "name": "randomatic",
  "description": "Generate randomized strings of a specified length, fast. Only the length is necessary, but you can optionally generate patterns using any combination of numeric, alpha-numeric, alphabetical, special or custom characters.",
  "version": "1.1.0",
  "homepage": "https://github.com/jonschlinkert/randomatic",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jonschlinkert/randomatic.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/randomatic/issues"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/jonschlinkert/randomatic/blob/master/LICENSE-MIT"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "main": "index.js",
  "files": [
    "index.js"
  ],
  "dependencies": {
    "is-number": "^1.1.0",
    "kind-of": "^1.0.0"
  },
  "devDependencies": {
    "benchmarked": "^0.1.3",
    "chalk": "^0.5.1",
    "glob": "^4.3.5",
    "should": "^4.4.1"
  },
  "keywords": [
    "alpha",
    "alpha-numeric",
    "alphanumeric",
    "characters",
    "chars",
    "numeric",
    "rand",
    "random",
    "randomize",
    "randomized"
  ],
  "readme": "# randomatic [![NPM version](https://badge.fury.io/js/randomatic.svg)](http://badge.fury.io/js/randomatic)\n\n> Generate randomized strings of a specified length, fast. Only the length is necessary, but you can optionally generate patterns using any combination of numeric, alpha-numeric, alphabetical, special or custom characters.\n\n## Install with [npm](npmjs.org)\n\n```bash\nnpm i randomatic --save\n```\n### Install with [bower](https://github.com/bower/bower)\n\n```bash\nbower install randomatic --save\n```\n\n\n## Usage\n\n```js\nvar randomize = require('randomatic');\n```\n\n\n## API\n\n```\nrandomize(pattern, length, options);\n```\n\n- `pattern` **{String}**: The pattern to use for randomizing\n- `length` **{Object}**: The length of the string to generate\n\n\n### pattern\n\n> The pattern to use for randomizing\n\nPatterns can contain any combination of the below characters, specified in any order.\n\n**Example:**\n\nTo generate a 10-character randomized string using all available characters:\n\n```js\nrandomize('*', 10);\n//=>\n\nrandomize('Aa0!', 10);\n//=>\n```\n\n* `a`: Lowercase alpha characters (`abcdefghijklmnopqrstuvwxyz'`)\n* `A`: Uppercase alpha characters (`ABCDEFGHIJKLMNOPQRSTUVWXYZ'`)\n* `0`: Numeric characters (`0123456789'`)\n* `!`: Special characters (`~!@#$%^&()_+-={}[];\\',.`)\n* `*`: All characters (all of the above combined)\n* `?`: Custom characters (pass a string of custom characters to the options)\n\n\n### length\n\n> the length of the string to generate\n\n**Examples:**\n\n* `randomize('A', 5)` will generate a 5-character, uppercase, alphabetical, randomized string, e.g. `KDJWJ`.\n* `randomize('0', 2)` will generate a 2-digit random number\n* `randomize('0', 3)` will generate a 3-digit random number\n* `randomize('0', 12)` will generate a 12-digit random number\n* `randomize('A0', 16)` will generate a 16-character, alpha-numeric randomized string\n\nIf `length` is left undefined, the length of the pattern in the first parameter will be used. For example:\n\n* `randomize('00')` will generate a 2-digit random number\n* `randomize('000')` will generate a 3-digit random number\n* `randomize('0000')` will generate a 4-digit random number...\n* `randomize('AAAAA')` will generate a 5-character, uppercase alphabetical random string...\n\nThese are just examples, [see the tests](./test.js) for more use cases and examples.\n\n\n\n## options\n\n#### chars\nType: `String`\n\nDefault: `undefined`\n\nDefine a custom string to be randomized.\n\n**Example:**\n\n* `randomize('?', 20, {chars: 'jonschlinkert'})` will generate a 20-character randomized string from the letters contained in `jonschlinkert`.\n* `randomize('?', {chars: 'jonschlinkert'})` will generate a 13-character randomized string from the letters contained in `jonschlinkert`.\n\n\n\n## Usage Examples\n\n* `randomize('A', 4)` (_whitespace insenstive_) would result in randomized 4-digit uppercase letters, like, `ZAKH`, `UJSL`... etc.\n* `randomize('AAAA')` is equivelant to `randomize('A', 4)`\n* `randomize('AAA0')` and `randomize('AA00')` and `randomize('A0A0')` are equivelant to `randomize('A0', 4)`\n* `randomize('aa')`: results in double-digit, randomized, lower-case letters (`abcdefghijklmnopqrstuvwxyz`)\n* `randomize('AAA')`: results in triple-digit, randomized, upper-case letters (`ABCDEFGHIJKLMNOPQRSTUVWXYZ`)\n* `randomize('0', 6)`: results in six-digit, randomized nubmers (`0123456789`)\n* `randomize('!', 5)`: results in single-digit randomized, _valid_ non-letter characters (`~!@#$%^&()_+-={}[];\\',.`)\n* `randomize('A!a0', 9)`: results in nine-digit, randomized characters (any of the above)\n\n_The order in which the characters are defined is insignificant._\n\n\n\n## Running tests\n\nInstall dev dependencies:\n\n```bash\nnpm install -d && mocha\n```\n\n## Contributing\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/randomatic/issues)\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2015 Jon Schlinkert  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb](https://github.com/assemble/verb) on January 26, 2015._",
  "readmeFilename": "README.md",
  "_id": "randomatic@1.1.0",
  "_shasum": "2ca36b9f93747aac985eb242749af88b45d5d42d",
  "_resolved": "https://registry.npmjs.org/randomatic/-/randomatic-1.1.0.tgz",
  "_from": "randomatic@>=1.1.0 <2.0.0"
}
